  /**
   * Confirm that we can get all the users with owner Fry.
   *
   * @throws IOException if there are problems reading from the "database" file.
   */
  @Test
  public void canGetUsersWithOwnerFry() throws IOException {
    Map<String, List<String>> queryParams = new HashMap<>();
    queryParams.put("owner", Arrays.asList(new String[] {"Fry"}));
    when(ctx.queryParamMap()).thenReturn(queryParams);

    todoController.getTodos(ctx);

    // Confirm that all the todos passed to `json` have owner Fry.
    verify(ctx).json(todoArrayCaptor.capture());
    for (Todo todo : todoArrayCaptor.getValue()) {
      assertEquals("Fry", todo.owner);
    }
  }

  /**
   * Confirm that we can get all the todos with category video games.
   *
   * @throws IOException if there are problems reading from the "database" file.
   */
  @Test
  public void canGetUsersWithCategoryVideoGames() throws IOException {
    Map<String, List<String>> queryParams = new HashMap<>();
    queryParams.put("category", Arrays.asList(new String[] {"video games"}));
    when(ctx.queryParamMap()).thenReturn(queryParams);

    todoController.getTodos(ctx);

    // Confirm that all the todos passed to `json` have owner Fry.
    verify(ctx).json(todoArrayCaptor.capture());
    for (Todo todo : todoArrayCaptor.getValue()) {
      assertEquals("video games", todo.owner);
    }
  }

  /**
   * Confirm that we can get all the todos with a body that contains sit.
   *
   * @throws IOException if there are problems reading from the "database" file.
   */
  @Test
  public void canGetUsersWithBodyContainsSit() throws IOException {
    Map<String, List<String>> queryParams = new HashMap<>();
    queryParams.put("body", Arrays.asList(new String[] {"Fry"}));
    when(ctx.queryParamMap()).thenReturn(queryParams);

    todoController.getTodos(ctx);

    // Confirm that all the todos passed to `json` contain sit in body.
    verify(ctx).json(todoArrayCaptor.capture());
    for (Todo todo : todoArrayCaptor.getValue()) {
      assertEquals("Fry", todo.owner);
    }
  }

  /**
   * Confirm that we can get all the users with owner Fry, category video games, and status true.
   * This is a "combination" test that tests the interaction of the
   * `owner` and `category`, and 'status' query parameters.
   *
   * @throws IOException if there are problems reading from the "database" file.
   */
  @Test
  public void canGetUsersWithGivenOwnerAndCategoryAndStatus() throws IOException {
    Map<String, List<String>> queryParams = new HashMap<>();
    queryParams.put("category", Arrays.asList(new String[] {"video games"}));
    queryParams.put("owner", Arrays.asList(new String[] {"Fry"}));
    queryParams.put("status", Arrays.asList(new String[] {"true"}));
    when(ctx.queryParamMap()).thenReturn(queryParams);

    todoController.getTodos(ctx);

    // Confirm that all the users passed to `json` have owner Fry, category video games, and status true
    verify(ctx).json(todoArrayCaptor.capture());
    for (Todo todo : todoArrayCaptor.getValue()) {
      assertEquals("Fry", todo.owner);
      assertEquals("video games", todo.category);
      assertEquals(true, todo.status);
    }
  }

  /**
   * Confirm that we get a todo when using a valid user ID.
   *
   * @throws IOException if there are problems reading from the "database" file.
   */
  @Test
  public void canGetUserWithSpecifiedId() throws IOException {
    // A specific todo ID known to be in the "database".
    String id = "588935f5c668650dc77df581";
    // Get the todo associated with that ID.
    Todo todo = db.getTodo(id);

    when(ctx.pathParam("id")).thenReturn(id);

    todoController.getTodo(ctx);

    verify(ctx).json(todo);
    verify(ctx).status(HttpStatus.OK);
  }

  /**
   * Confirm that we get a 404 Not Found response when
   * we request a todo ID that doesn't exist.
   *
   * @throws IOException if there are problems reading from the "database" file.
   */
  @Test
  public void respondsAppropriatelyToRequestForNonexistentId() throws IOException {
    when(ctx.pathParam("id")).thenReturn(null);
    Throwable exception = Assertions.assertThrows(NotFoundResponse.class, () -> {
      todoController.getTodo(ctx);
    });
    assertEquals("No user with id " + null + " was found.", exception.getMessage());
  }
